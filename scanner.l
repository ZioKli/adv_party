%{
/*
 * Simple example lex input file
 *
 * Shawn Ostermann -- Sept 11, 2022
 *
 * Headstart version
 */

#include <string.h>
#include <ctype.h>
#include "adv.h"
#include "parser.tab.h"

/* some internal files generated by bison */
void yyerror(const char *s,...);
void yywarn(const char *s,...);
int yywrap(void) {return(1);}    // should be in library, but here it is for github

/* useful global variables */
extern int debug;

/* Everything up to the funny characters on the next line */
/* goes directly into the lex.yy.c file */
%}

/* The rest of this after the '%%' is lex rules */
%%

[ \t\,]+ {
    
}  /* Just ignore white space and commas (they're optional)*/

"\n" {
    return(EOLN);
} 

[a-zA-Z]+ {
    yylval.string = strdup(yytext);  /* make a copy of the string */
    return(ITEM_NAME);
}

[a-zA-Z\']+ {
    yylval.string = strdup(yytext);
    return(CHARACTER_NAME);
}

[:\;][\)\(\]\[\<\>IDP] {
    yylval.string = strdup(yytext);
    return(PORTRAIT);
}

"[" {
    return(LEATHER_BAG_OPEN);
}

"{" {
    return(SILK_BAG_OPEN);
}

"(" {
    return(CANVAS_BAG_OPEN);
}

"]" {
    return(LEATHER_BAG_CLOSE);
}

"}" {
    return(SILK_BAG_CLOSE);
}

")" {
    return(CANVAS_BAG_CLOSE);
}

[0-9]+ {
    yylval.number = atoi(yytext);
    return(NUMBER);
} 


%{
/* you need rules for the other reserved characters below */

/* you will also need a rule that returns "strings" as WORDS */
%}



.		{
    /* if we haven't matched anything yet, then it's illegal */
    fprintf(stdout, "scanner: Bad character '%c'\n", *yytext);
}


%%
